plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id "io.github.goooler.shadow" version "8.1.8"
}

group = 'com.minegolem'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21-R0.1-SNAPSHOT")

    implementation 'com.jeff-media:custom-block-data:2.2.4'

    implementation "com.zaxxer:HikariCP:5.1.0"
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.5.3'

    implementation 'com.jeff-media:custom-block-data:2.2.4'

    implementation 'org.jetbrains:annotations:23.0.0'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

shadowJar {

    archiveFileName = 'Waystones-' + project.version + '.jar'

    relocate 'com.zaxxer', 'com.minegolem.waystone.libs.hikariCP'
    relocate 'org.mariadb.jdbc', 'com.minegolem.waystone.libs.mariadb'

    relocate 'com.jeff_media.customblockdata', 'com.minegolem.waystone.libs.customblockdata'

    mergeServiceFiles()
}

tasks.build.dependsOn shadowJar

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
